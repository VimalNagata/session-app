{"ast":null,"code":"import { Amplify } from '@aws-amplify/core';\nimport { assertTokenProviderConfig, AuthAction, HubInternal } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError.mjs';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation.mjs';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers/regionParsers.mjs';\nimport { isAutoSignInStarted, isAutoSignInUserUsingConfirmSignUp, setAutoSignInStarted } from '../utils/signUpHelpers.mjs';\nimport { getAuthUserAgentValue } from '../../../utils/getAuthUserAgentValue.mjs';\nimport { getUserContextData } from '../utils/userContextData.mjs';\nimport '@aws-amplify/core/internals/aws-client-utils/composers';\nimport '@aws-amplify/core/internals/aws-client-utils';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/shared/handler/cognitoUserPoolTransferHandler.mjs';\nimport '../../../foundation/factories/serviceClients/cognitoIdentityProvider/constants.mjs';\nimport { createConfirmSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider/createConfirmSignUpClient.mjs';\nimport { createCognitoUserPoolEndpointResolver } from '../factories/createCognitoUserPoolEndpointResolver.mjs';\n\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nasync function confirmSignUp(input) {\n  const {\n    username,\n    confirmationCode,\n    options\n  } = input;\n  const authConfig = Amplify.getConfig().Auth?.Cognito;\n  assertTokenProviderConfig(authConfig);\n  const {\n    userPoolId,\n    userPoolClientId,\n    userPoolEndpoint\n  } = authConfig;\n  const clientMetadata = options?.clientMetadata;\n  assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n  assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n  const UserContextData = getUserContextData({\n    username,\n    userPoolId,\n    userPoolClientId\n  });\n  const confirmSignUpClient = createConfirmSignUpClient({\n    endpointResolver: createCognitoUserPoolEndpointResolver({\n      endpointOverride: userPoolEndpoint\n    })\n  });\n  await confirmSignUpClient({\n    region: getRegionFromUserPoolId(authConfig.userPoolId),\n    userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp)\n  }, {\n    Username: username,\n    ConfirmationCode: confirmationCode,\n    ClientMetadata: clientMetadata,\n    ForceAliasCreation: options?.forceAliasCreation,\n    ClientId: authConfig.userPoolClientId,\n    UserContextData\n  });\n  return new Promise((resolve, reject) => {\n    try {\n      const signUpOut = {\n        isSignUpComplete: true,\n        nextStep: {\n          signUpStep: 'DONE'\n        }\n      };\n      if (!isAutoSignInStarted() || !isAutoSignInUserUsingConfirmSignUp(username)) {\n        resolve(signUpOut);\n        return;\n      }\n      const stopListener = HubInternal.listen('auth-internal', ({\n        payload\n      }) => {\n        switch (payload.event) {\n          case 'autoSignIn':\n            resolve({\n              isSignUpComplete: true,\n              nextStep: {\n                signUpStep: 'COMPLETE_AUTO_SIGN_IN'\n              }\n            });\n            setAutoSignInStarted(false);\n            stopListener();\n        }\n      });\n      HubInternal.dispatch('auth-internal', {\n        event: 'confirmSignUp',\n        data: signUpOut\n      });\n    } catch (error) {\n      reject(error);\n    }\n  });\n}\nexport { confirmSignUp };","map":{"version":3,"names":["confirmSignUp","input","username","confirmationCode","options","authConfig","Amplify","getConfig","Auth","Cognito","assertTokenProviderConfig","userPoolId","userPoolClientId","userPoolEndpoint","clientMetadata","assertValidationError","AuthValidationErrorCode","EmptyConfirmSignUpUsername","EmptyConfirmSignUpCode","UserContextData","getUserContextData","confirmSignUpClient","createConfirmSignUpClient","endpointResolver","createCognitoUserPoolEndpointResolver","endpointOverride","region","getRegionFromUserPoolId","userAgentValue","getAuthUserAgentValue","AuthAction","ConfirmSignUp","Username","ConfirmationCode","ClientMetadata","ForceAliasCreation","forceAliasCreation","ClientId","Promise","resolve","reject","signUpOut","isSignUpComplete","nextStep","signUpStep","isAutoSignInStarted","isAutoSignInUserUsingConfirmSignUp","stopListener","HubInternal","listen","payload","event","setAutoSignInStarted","dispatch","data","error"],"sources":["/Users/vimalnagata/Projects/session-app/node_modules/@aws-amplify/auth/src/providers/cognito/apis/confirmSignUp.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { AuthAction, HubInternal, assertTokenProviderConfig, } from '@aws-amplify/core/internals/utils';\nimport { assertValidationError } from '../../../errors/utils/assertValidationError';\nimport { AuthValidationErrorCode } from '../../../errors/types/validation';\nimport { getRegionFromUserPoolId } from '../../../foundation/parsers';\nimport { isAutoSignInStarted, isAutoSignInUserUsingConfirmSignUp, setAutoSignInStarted, } from '../utils/signUpHelpers';\nimport { getAuthUserAgentValue } from '../../../utils';\nimport { getUserContextData } from '../utils/userContextData';\nimport { createConfirmSignUpClient } from '../../../foundation/factories/serviceClients/cognitoIdentityProvider';\nimport { createCognitoUserPoolEndpointResolver } from '../factories';\n/**\n * Confirms a new user account.\n *\n * @param input -  The ConfirmSignUpInput object.\n * @returns ConfirmSignUpOutput\n * @throws -{@link ConfirmSignUpException }\n * Thrown due to an invalid confirmation code.\n * @throws -{@link AuthValidationErrorCode }\n * Thrown due to an empty confirmation code\n * @throws AuthTokenConfigException - Thrown when the token provider config is invalid.\n */\nexport async function confirmSignUp(input) {\n    const { username, confirmationCode, options } = input;\n    const authConfig = Amplify.getConfig().Auth?.Cognito;\n    assertTokenProviderConfig(authConfig);\n    const { userPoolId, userPoolClientId, userPoolEndpoint } = authConfig;\n    const clientMetadata = options?.clientMetadata;\n    assertValidationError(!!username, AuthValidationErrorCode.EmptyConfirmSignUpUsername);\n    assertValidationError(!!confirmationCode, AuthValidationErrorCode.EmptyConfirmSignUpCode);\n    const UserContextData = getUserContextData({\n        username,\n        userPoolId,\n        userPoolClientId,\n    });\n    const confirmSignUpClient = createConfirmSignUpClient({\n        endpointResolver: createCognitoUserPoolEndpointResolver({\n            endpointOverride: userPoolEndpoint,\n        }),\n    });\n    await confirmSignUpClient({\n        region: getRegionFromUserPoolId(authConfig.userPoolId),\n        userAgentValue: getAuthUserAgentValue(AuthAction.ConfirmSignUp),\n    }, {\n        Username: username,\n        ConfirmationCode: confirmationCode,\n        ClientMetadata: clientMetadata,\n        ForceAliasCreation: options?.forceAliasCreation,\n        ClientId: authConfig.userPoolClientId,\n        UserContextData,\n    });\n    return new Promise((resolve, reject) => {\n        try {\n            const signUpOut = {\n                isSignUpComplete: true,\n                nextStep: {\n                    signUpStep: 'DONE',\n                },\n            };\n            if (!isAutoSignInStarted() ||\n                !isAutoSignInUserUsingConfirmSignUp(username)) {\n                resolve(signUpOut);\n                return;\n            }\n            const stopListener = HubInternal.listen('auth-internal', ({ payload }) => {\n                switch (payload.event) {\n                    case 'autoSignIn':\n                        resolve({\n                            isSignUpComplete: true,\n                            nextStep: {\n                                signUpStep: 'COMPLETE_AUTO_SIGN_IN',\n                            },\n                        });\n                        setAutoSignInStarted(false);\n                        stopListener();\n                }\n            });\n            HubInternal.dispatch('auth-internal', {\n                event: 'confirmSignUp',\n                data: signUpOut,\n            });\n        }\n        catch (error) {\n            reject(error);\n        }\n    });\n}\n"],"mappings":";;;;;;;;;;;;;;;AAAA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACO,eAAeA,aAAaA,CAACC,KAAK,EAAE;EACvC,MAAM;IAAEC,QAAQ;IAAEC,gBAAgB;IAAEC;EAAO,CAAE,GAAGH,KAAK;EACrD,MAAMI,UAAU,GAAGC,OAAO,CAACC,SAAS,EAAE,CAACC,IAAI,EAAEC,OAAO;EACpDC,yBAAyB,CAACL,UAAU,CAAC;EACrC,MAAM;IAAEM,UAAU;IAAEC,gBAAgB;IAAEC;EAAgB,CAAE,GAAGR,UAAU;EACrE,MAAMS,cAAc,GAAGV,OAAO,EAAEU,cAAc;EAC9CC,qBAAqB,CAAC,CAAC,CAACb,QAAQ,EAAEc,uBAAuB,CAACC,0BAA0B,CAAC;EACrFF,qBAAqB,CAAC,CAAC,CAACZ,gBAAgB,EAAEa,uBAAuB,CAACE,sBAAsB,CAAC;EACzF,MAAMC,eAAe,GAAGC,kBAAkB,CAAC;IACvClB,QAAQ;IACRS,UAAU;IACVC;EACR,CAAK,CAAC;EACF,MAAMS,mBAAmB,GAAGC,yBAAyB,CAAC;IAClDC,gBAAgB,EAAEC,qCAAqC,CAAC;MACpDC,gBAAgB,EAAEZ;IAC9B,CAAS;EACT,CAAK,CAAC;EACF,MAAMQ,mBAAmB,CAAC;IACtBK,MAAM,EAAEC,uBAAuB,CAACtB,UAAU,CAACM,UAAU,CAAC;IACtDiB,cAAc,EAAEC,qBAAqB,CAACC,UAAU,CAACC,aAAa;EACtE,CAAK,EAAE;IACCC,QAAQ,EAAE9B,QAAQ;IAClB+B,gBAAgB,EAAE9B,gBAAgB;IAClC+B,cAAc,EAAEpB,cAAc;IAC9BqB,kBAAkB,EAAE/B,OAAO,EAAEgC,kBAAkB;IAC/CC,QAAQ,EAAEhC,UAAU,CAACO,gBAAgB;IACrCO;EACR,CAAK,CAAC;EACF,OAAO,IAAImB,OAAO,CAAC,CAACC,OAAO,EAAEC,MAAM,KAAK;IACpC,IAAI;MACA,MAAMC,SAAS,GAAG;QACdC,gBAAgB,EAAE,IAAI;QACtBC,QAAQ,EAAE;UACNC,UAAU,EAAE;QAChC;MACA,CAAa;MACD,IAAI,CAACC,mBAAmB,EAAE,IACtB,CAACC,kCAAkC,CAAC5C,QAAQ,CAAC,EAAE;QAC/CqC,OAAO,CAACE,SAAS,CAAC;QAClB;MAChB;MACY,MAAMM,YAAY,GAAGC,WAAW,CAACC,MAAM,CAAC,eAAe,EAAE,CAAC;QAAEC;MAAO,CAAE,KAAK;QACtE,QAAQA,OAAO,CAACC,KAAK;UACjB,KAAK,YAAY;YACbZ,OAAO,CAAC;cACJG,gBAAgB,EAAE,IAAI;cACtBC,QAAQ,EAAE;gBACNC,UAAU,EAAE;cAC5C;YACA,CAAyB,CAAC;YACFQ,oBAAoB,CAAC,KAAK,CAAC;YAC3BL,YAAY,EAAE;QACtC;MACA,CAAa,CAAC;MACFC,WAAW,CAACK,QAAQ,CAAC,eAAe,EAAE;QAClCF,KAAK,EAAE,eAAe;QACtBG,IAAI,EAAEb;MACtB,CAAa,CAAC;IACd,CAAS,CACD,OAAOc,KAAK,EAAE;MACVf,MAAM,CAACe,KAAK,CAAC;IACzB;EACA,CAAK,CAAC;AACN","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}